test compile precise-output
target aarch64

function %atomic_load_i64(i64) -> i64 {
block0(v0: i64):
  v1 = atomic_load.i64 v0
  return v1
}

; block0:
;   ldar x0, [x0]
;   ret

function %atomic_load_i32(i64) -> i32 {
block0(v0: i64):
  v1 = atomic_load.i32 v0
  return v1
}

; block0:
;   ldar w0, [x0]
;   ret

function %atomic_load_i16(i64) -> i16 {
block0(v0: i64):
  v1 = atomic_load.i16 v0
  return v1
}

; block0:
;   ldarh w0, [x0]
;   ret

function %atomic_load_i8(i64) -> i8 {
block0(v0: i64):
  v1 = atomic_load.i8 v0
  return v1
}

; block0:
;   ldarb w0, [x0]
;   ret

function %atomic_load_i32_i64(i64) -> i64 {
block0(v0: i64):
  v1 = atomic_load.i32 v0
  v2 = uextend.i64 v1
  return v2
}

; block0:
;   ldar w0, [x0]
;   ret

function %atomic_load_i16_i64(i64) -> i64 {
block0(v0: i64):
  v1 = atomic_load.i16 v0
  v2 = uextend.i64 v1
  return v2
}

; block0:
;   ldarh w0, [x0]
;   ret

function %atomic_load_i8_i64(i64) -> i64 {
block0(v0: i64):
  v1 = atomic_load.i8 v0
  v2 = uextend.i64 v1
  return v2
}

; block0:
;   ldarb w0, [x0]
;   ret

function %atomic_load_i16_i32(i64) -> i32 {
block0(v0: i64):
  v1 = atomic_load.i16 v0
  v2 = uextend.i32 v1
  return v2
}

; block0:
;   ldarh w0, [x0]
;   ret

function %atomic_load_i8_i32(i64) -> i32 {
block0(v0: i64):
  v1 = atomic_load.i8 v0
  v2 = uextend.i32 v1
  return v2
}

; block0:
;   ldarb w0, [x0]
;   ret

