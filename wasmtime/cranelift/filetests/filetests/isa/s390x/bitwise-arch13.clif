
test compile precise-output
target s390x arch13

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BAND_NOT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %band_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band_not.i64 v0, v1
  return v2
}

; block0:
;   ncgrk %r2, %r2, %r3
;   br %r14

function %band_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = band_not.i32 v0, v1
  return v2
}

; block0:
;   ncrk %r2, %r2, %r3
;   br %r14

function %band_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = band_not.i16 v0, v1
  return v2
}

; block0:
;   ncrk %r2, %r2, %r3
;   br %r14

function %band_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = band_not.i8 v0, v1
  return v2
}

; block0:
;   ncrk %r2, %r2, %r3
;   br %r14

function %bor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor_not.i64 v0, v1
  return v2
}

; block0:
;   ocgrk %r2, %r2, %r3
;   br %r14

function %bor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bor_not.i32 v0, v1
  return v2
}

; block0:
;   ocrk %r2, %r2, %r3
;   br %r14

function %bor_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bor_not.i16 v0, v1
  return v2
}

; block0:
;   ocrk %r2, %r2, %r3
;   br %r14

function %bor_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bor_not.i8 v0, v1
  return v2
}

; block0:
;   ocrk %r2, %r2, %r3
;   br %r14

function %bxor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor_not.i64 v0, v1
  return v2
}

; block0:
;   nxgrk %r2, %r2, %r3
;   br %r14

function %bxor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = bxor_not.i32 v0, v1
  return v2
}

; block0:
;   nxrk %r2, %r2, %r3
;   br %r14

function %bxor_not_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = bxor_not.i16 v0, v1
  return v2
}

; block0:
;   nxrk %r2, %r2, %r3
;   br %r14

function %bxor_not_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = bxor_not.i8 v0, v1
  return v2
}

; block0:
;   nxrk %r2, %r2, %r3
;   br %r14

function %bnot_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bnot.i64 v0
  return v1
}

; block0:
;   nogrk %r2, %r2, %r2
;   br %r14

function %bnot_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bnot.i32 v0
  return v1
}

; block0:
;   nork %r2, %r2, %r2
;   br %r14

function %bnot_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bnot.i16 v0
  return v1
}

; block0:
;   nork %r2, %r2, %r2
;   br %r14

function %bnot_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bnot.i8 v0
  return v1
}

; block0:
;   nork %r2, %r2, %r2
;   br %r14

function %bitselect_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = bitselect.i64 v0, v1, v2
  return v3
}

; block0:
;   ngr %r3, %r2
;   ncgrk %r5, %r4, %r2
;   ogrk %r2, %r5, %r3
;   br %r14

function %bitselect_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = bitselect.i32 v0, v1, v2
  return v3
}

; block0:
;   nr %r3, %r2
;   ncrk %r5, %r4, %r2
;   ork %r2, %r5, %r3
;   br %r14

function %bitselect_i16(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = bitselect.i16 v0, v1, v2
  return v3
}

; block0:
;   nr %r3, %r2
;   ncrk %r5, %r4, %r2
;   ork %r2, %r5, %r3
;   br %r14

function %bitselect_i8(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = bitselect.i8 v0, v1, v2
  return v3
}

; block0:
;   nr %r3, %r2
;   ncrk %r5, %r4, %r2
;   ork %r2, %r5, %r3
;   br %r14

