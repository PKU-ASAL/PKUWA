test compile precise-output
target s390x

function %atomic_load_i64(i64) -> i64 {
block0(v0: i64):
  v1 = atomic_load.i64 little v0
  return v1
}

; block0:
;   lrvg %r2, 0(%r2)
;   br %r14

function %atomic_load_i64_sym() -> i64 {
  gv0 = symbol colocated %sym
block0:
  v0 = symbol_value.i64 gv0
  v1 = atomic_load.i64 aligned little v0
  return v1
}

; block0:
;   larl %r1, %sym + 0 ; lrvg %r2, 0(%r1)
;   br %r14

function %atomic_load_i32(i64) -> i32 {
block0(v0: i64):
  v1 = atomic_load.i32 little v0
  return v1
}

; block0:
;   lrv %r2, 0(%r2)
;   br %r14

function %atomic_load_i32_sym() -> i32 {
  gv0 = symbol colocated %sym
block0:
  v0 = symbol_value.i64 gv0
  v1 = atomic_load.i32 aligned little v0
  return v1
}

; block0:
;   larl %r1, %sym + 0 ; lrv %r2, 0(%r1)
;   br %r14

function %atomic_load_i16(i64) -> i16 {
block0(v0: i64):
  v1 = atomic_load.i16 little v0
  return v1
}

; block0:
;   lrvh %r2, 0(%r2)
;   br %r14

function %atomic_load_i16_sym() -> i16 {
  gv0 = symbol colocated %sym
block0:
  v0 = symbol_value.i64 gv0
  v1 = atomic_load.i16 aligned little v0
  return v1
}

; block0:
;   larl %r1, %sym + 0 ; lrvh %r2, 0(%r1)
;   br %r14

function %atomic_load_i8(i64) -> i8 {
block0(v0: i64):
  v1 = atomic_load.i8 little v0
  return v1
}

; block0:
;   llc %r2, 0(%r2)
;   br %r14

