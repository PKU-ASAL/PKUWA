test compile precise-output
target x86_64

function %popcnt64(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrq    $1, %rax, %rax
;   movabsq $8608480567731124087, %r8
;   andq    %rax, %r8, %rax
;   subq    %rdi, %rax, %rdi
;   shrq    $1, %rax, %rax
;   andq    %rax, %r8, %rax
;   subq    %rdi, %rax, %rdi
;   shrq    $1, %rax, %rax
;   andq    %rax, %r8, %rax
;   subq    %rdi, %rax, %rdi
;   movq    %rdi, %rax
;   shrq    $4, %rax, %rax
;   addq    %rax, %rdi, %rax
;   movabsq $1085102592571150095, %rsi
;   andq    %rax, %rsi, %rax
;   movabsq $72340172838076673, %rdx
;   imulq   %rax, %rdx, %rax
;   shrq    $56, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %popcnt64load(i64) -> i64 {
block0(v0: i64):
    v1 = load.i64 v0
    v2 = popcnt v1
    return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    0(%rdi), %rcx
;   movq    %rcx, %rdx
;   shrq    $1, %rdx, %rdx
;   movabsq $8608480567731124087, %r9
;   andq    %rdx, %r9, %rdx
;   subq    %rcx, %rdx, %rcx
;   shrq    $1, %rdx, %rdx
;   andq    %rdx, %r9, %rdx
;   subq    %rcx, %rdx, %rcx
;   shrq    $1, %rdx, %rdx
;   andq    %rdx, %r9, %rdx
;   subq    %rcx, %rdx, %rcx
;   movq    %rcx, %rax
;   shrq    $4, %rax, %rax
;   addq    %rax, %rcx, %rax
;   movabsq $1085102592571150095, %rdi
;   andq    %rax, %rdi, %rax
;   movabsq $72340172838076673, %r8
;   imulq   %rax, %r8, %rax
;   shrq    $56, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %popcnt32(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrl    $1, %eax, %eax
;   movl    $2004318071, %r8d
;   andl    %eax, %r8d, %eax
;   subl    %edi, %eax, %edi
;   shrl    $1, %eax, %eax
;   andl    %eax, %r8d, %eax
;   subl    %edi, %eax, %edi
;   shrl    $1, %eax, %eax
;   andl    %eax, %r8d, %eax
;   subl    %edi, %eax, %edi
;   movq    %rdi, %rax
;   shrl    $4, %eax, %eax
;   addl    %eax, %edi, %eax
;   andl    %eax, $252645135, %eax
;   imull   %eax, $16843009, %eax
;   shrl    $24, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %popcnt32load(i64) -> i32 {
block0(v0: i64):
    v1 = load.i32 v0
    v2 = popcnt v1
    return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %ecx
;   movq    %rcx, %rdx
;   shrl    $1, %edx, %edx
;   movl    $2004318071, %r9d
;   andl    %edx, %r9d, %edx
;   subl    %ecx, %edx, %ecx
;   shrl    $1, %edx, %edx
;   andl    %edx, %r9d, %edx
;   subl    %ecx, %edx, %ecx
;   shrl    $1, %edx, %edx
;   andl    %edx, %r9d, %edx
;   subl    %ecx, %edx, %ecx
;   movq    %rcx, %rax
;   shrl    $4, %eax, %eax
;   addl    %eax, %ecx, %eax
;   andl    %eax, $252645135, %eax
;   imull   %eax, $16843009, %eax
;   shrl    $24, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

