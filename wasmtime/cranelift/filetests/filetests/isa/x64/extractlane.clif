test compile precise-output
target x86_64

function %f1(i8x16) -> i8 {
block0(v0: i8x16):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pextrb  $1, %xmm0, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f2(i16x8) -> i16 {
block0(v0: i16x8):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pextrw  $1, %xmm0, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f3(i32x4) -> i32 {
block0(v0: i32x4):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pextrd  $1, %xmm0, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f4(i64x2) -> i64 {
block0(v0: i64x2):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pextrd.w $1, %xmm0, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f5(f32x4) -> f32 {
block0(v0: f32x4):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $1, %xmm0, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f6(f64x2) -> f64 {
block0(v0: f64x2):
  v1 = extractlane v0, 1
  return v1
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $238, %xmm0, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

