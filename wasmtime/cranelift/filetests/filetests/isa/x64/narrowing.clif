test compile precise-output
target x86_64

function %f1(i16x8, i16x8) -> i8x16 {
block0(v0: i16x8, v1: i16x8):
  v2 = snarrow v0, v1
  return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   packsswb %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f2(i32x4, i32x4) -> i16x8 {
block0(v0: i32x4, v1: i32x4):
  v2 = snarrow v0, v1
  return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   packssdw %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f3(f64x2) -> i32x4 {
block0(v0: f64x2):
  v1 = fcvt_to_sint_sat.i64x2 v0
  v2 = vconst.i64x2 0x00
  v3 = snarrow v1, v2
  return v3
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm5
;   cmppd   $0, %xmm5, %xmm0, %xmm5
;   movupd  const(0), %xmm6
;   andps   %xmm5, %xmm6, %xmm5
;   minpd   %xmm0, %xmm5, %xmm0
;   cvttpd2dq %xmm0, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f4(i16x8, i16x8) -> i8x16 {
block0(v0: i16x8, v1: i16x8):
  v2 = unarrow v0, v1
  return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   packuswb %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f5(i32x4, i32x4) -> i16x8 {
block0(v0: i32x4, v1: i32x4):
  v2 = unarrow v0, v1
  return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   packusdw %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

