; Parsing branches and jumps.
test cat

; Jumps with no arguments. The '()' empty argument list is optional.
function %minimal() {
block0:
    jump block1

block1:
    jump block0()
}
; sameln: function %minimal() fast {
; nextln: block0:
; nextln:     jump block1
; nextln: 
; nextln: block1:
; nextln:     jump block0
; nextln: }

; Jumps with 1 arg.
function %onearg(i32) {
block0(v90: i32):
    jump block1(v90)

block1(v91: i32):
    jump block0(v91)
}
; sameln: function %onearg(i32) fast {
; nextln: block0(v90: i32):
; nextln:     jump block1(v90)
; nextln: 
; nextln: block1(v91: i32):
; nextln:     jump block0(v91)
; nextln: }

; Jumps with 2 args.
function %twoargs(i32, f32) {
block0(v90: i32, v91: f32):
    jump block1(v90, v91)

block1(v92: i32, v93: f32):
    jump block0(v92, v93)
}
; sameln: function %twoargs(i32, f32) fast {
; nextln: block0(v90: i32, v91: f32):
; nextln:     jump block1(v90, v91)
; nextln: 
; nextln: block1(v92: i32, v93: f32):
; nextln:     jump block0(v92, v93)
; nextln: }

; Branches with no arguments. The '()' empty argument list is optional.
function %minimal(i32) {
block0(v90: i32):
    brz v90, block1

block1:
    brnz v90, block1()
}
; sameln: function %minimal(i32) fast {
; nextln: block0(v90: i32):
; nextln:     brz v90, block1
; nextln: 
; nextln: block1:
; nextln:     brnz.i32 v90, block1
; nextln: }

function %twoargs(i32, f32) {
block0(v90: i32, v91: f32):
    brz v90, block1(v90, v91)

block1(v92: i32, v93: f32):
    brnz v90, block0(v92, v93)
}
; sameln: function %twoargs(i32, f32) fast {
; nextln: block0(v90: i32, v91: f32):
; nextln:     brz v90, block1(v90, v91)
; nextln: 
; nextln: block1(v92: i32, v93: f32):
; nextln:     brnz.i32 v90, block0(v92, v93)
; nextln: }

function %jumptable(i32) {
    jt200 = jump_table []
    jt2 = jump_table [block10, block40, block20, block30]

block10(v3: i32):
    br_table v3, block50, jt2

block20:
    trap user2
block30:
    trap user3
block40:
    trap user4
block50:
    trap user1    
}
; sameln: function %jumptable(i32) fast {
; check:      jt2 = jump_table [block10, block40, block20, block30]
; check:      jt200 = jump_table []
; check:  block10(v3: i32):
; nextln:     br_table v3, block50, jt2
; nextln: 
; nextln: block20:
; nextln:     trap user2
; nextln: 
; nextln: block30:
; nextln:     trap user3
; nextln: 
; nextln: block40:
; nextln:     trap user4
; nextln: 
; nextln: block50:
; nextln:     trap user1
; nextln: }
