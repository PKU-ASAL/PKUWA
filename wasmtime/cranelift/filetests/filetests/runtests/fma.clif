test interpret
test run
target aarch64
target s390x
target x86_64 has_avx has_fma
target x86_64 has_avx=false has_fma=false

function %fma_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fma v0, v1, v2
    return v3
}
; run: %fma_f32(0x9.0, 0x9.0, 0x9.0) == 0x1.680000p6
; run: %fma_f32(0x83.0, 0x2.68091p6, 0x9.88721p1) == 0x1.3b88e6p14

; run: %fma_f32(0x0.0, 0x0.0, 0x0.0) == 0x0.0
; run: %fma_f32(0x0.0, 0x0.0, -0x0.0) == 0x0.0
; run: %fma_f32(0x0.0, -0x0.0, 0x0.0) == 0x0.0
; run: %fma_f32(-0x0.0, 0x0.0, 0x0.0) == 0x0.0

; run: %fma_f32(-Inf, -Inf, 0x0.0) == +Inf
; run: %fma_f32(Inf, -Inf, 0x0.0) == -Inf
; run: %fma_f32(-Inf, Inf, 0x0.0) == -Inf
; run: %fma_f32(Inf, -Inf, -Inf) == -Inf
; run: %fma_f32(-Inf, Inf, -Inf) == -Inf

; F32 Epsilon / Max / Min Positive
; run: %fma_f32(0x1.000000p-23, 0x1.000000p-23, 0x1.000000p-23) == 0x1.000002p-23
; run: %fma_f32(0x0.0, 0x0.0, 0x1.000000p-23) == 0x1.000000p-23
; run: %fma_f32(0x1.fffffep127, 0x1.fffffep127, 0x1.fffffep127) == +Inf
; run: %fma_f32(0x0.0, 0x0.0, 0x1.fffffep127) == 0x1.fffffep127
; run: %fma_f32(0x1.000000p-126, 0x1.000000p-126, 0x1.000000p-126) == 0x1.000000p-126
; run: %fma_f32(0x0.0, 0x0.0, 0x1.000000p-126) == 0x1.000000p-126

; F32 Subnormals
; run: %fma_f32(0x0.800000p-126, 0x0.800000p-126, 0x0.800000p-126) == 0x0.800000p-126
; run: %fma_f32(0x0.800000p-126, 0x0.800000p-126, 0x0.0) == 0x0.0
; run: %fma_f32(0x0.0, 0x0.0, 0x0.800000p-126) == 0x0.800000p-126
; run: %fma_f32(0x0.000002p-126, 0x0.000002p-126, 0x0.000002p-126) == 0x0.000002p-126
; run: %fma_f32(0x0.000002p-126, 0x0.000002p-126, 0x0.0) == 0x0.0
; run: %fma_f32(0x0.0, 0x0.0, 0x0.000002p-126) == 0x0.000002p-126

; Regression tests for x86_64-pc-windows-gnu
; See: https://github.com/bytecodealliance/wasmtime/issues/4512
; run: %fma_f32(0x1.0p100, 0x1.0p100, -Inf) == -Inf
; run: %fma_f32(0x1.fffffep23, 0x1.000004p28, 0x1.fcp5) == 0x1.000002p52
; run: %fma_f32(0x1.84ae3p125, 0x1.6p-141, 0x1.0p-149) == 0x1.0b37c2p-15
; run: %fma_f32(0x1.00001p50, 0x1.1p50, 0x1.0p-149) == 0x1.100012p100
; run: %fma_f32(0x1.000002p50, 0x1.8p50, -0x1.0p-149) == 0x1.800002p100
; run: %fma_f32(0x1.83bd78p4, -0x1.cp118, -0x1.344108p-2) == -0x1.5345cap123



;; The IEEE754 Standard does not make a lot of guarantees about what
;; comes out of NaN producing operations, we just check if its a NaN
function %fma_is_nan_f32(f32, f32, f32) -> i32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fma v0, v1, v2
    v4 = fcmp ne v3, v3
    v5 = bint.i32 v4
    return v5
}
; run: %fma_is_nan_f32(Inf, -Inf, Inf) == 1
; run: %fma_is_nan_f32(-Inf, Inf, Inf) == 1
; run: %fma_is_nan_f32(-Inf, -Inf, -Inf) == 1

; run: %fma_is_nan_f32(+NaN, 0x0.0, 0x0.0) == 1
; run: %fma_is_nan_f32(0x0.0, +NaN, 0x0.0) == 1
; run: %fma_is_nan_f32(0x0.0, 0x0.0, +NaN) == 1
; run: %fma_is_nan_f32(-NaN, 0x0.0, 0x0.0) == 1
; run: %fma_is_nan_f32(0x0.0, -NaN, 0x0.0) == 1
; run: %fma_is_nan_f32(0x0.0, 0x0.0, -NaN) == 1



function %fma_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fma v0, v1, v2
    return v3
}
; run: %fma_f64(0x9.0, 0x9.0, 0x9.0) == 0x1.680000p6
; run: %fma_f64(0x1.3b88ea148dd4ap14, 0x2.680916809121p6, 0x9.887218721837p1) == 0x1.7ba6ebee17417p21

; run: %fma_f64(0x0.0, 0x0.0, 0x0.0) == 0x0.0
; run: %fma_f64(0x0.0, 0x0.0, -0x0.0) == 0x0.0
; run: %fma_f64(0x0.0, -0x0.0, 0x0.0) == 0x0.0
; run: %fma_f64(-0x0.0, 0x0.0, 0x0.0) == 0x0.0

; run: %fma_f64(-Inf, -Inf, 0x0.0) == +Inf
; run: %fma_f64(Inf, -Inf, 0x0.0) == -Inf
; run: %fma_f64(-Inf, Inf, 0x0.0) == -Inf
; run: %fma_f64(Inf, -Inf, -Inf) == -Inf
; run: %fma_f64(-Inf, Inf, -Inf) == -Inf

; F64 Epsilon / Max / Min Positive
; run: %fma_f64(0x1.0000000000000p-52, 0x1.0000000000000p-52, 0x1.0000000000000p-52) == 0x1.0000000000001p-52
; run: %fma_f64(0x0.0, 0x0.0, 0x1.0000000000000p-52) == 0x1.0000000000000p-52
; run: %fma_f64(0x1.fffffffffffffp1023, 0x1.fffffffffffffp1023, 0x1.fffffffffffffp1023) == +Inf
; run: %fma_f64(0x0.0, 0x0.0, 0x1.fffffffffffffp1023) == 0x1.fffffffffffffp1023
; run: %fma_f64(0x1.0000000000000p-1022, 0x1.0000000000000p-1022, 0x1.0000000000000p-1022) == 0x1.0000000000000p-1022
; run: %fma_f64(0x0.0, 0x0.0, 0x1.0000000000000p-1022) == 0x1.0000000000000p-1022

; F64 Subnormals
; run: %fma_f64(0x0.8000000000000p-1022, 0x0.8000000000000p-1022, 0x0.8000000000000p-1022) == 0x0.8000000000000p-1022
; run: %fma_f64(0x0.8000000000000p-1022, 0x0.8000000000000p-1022, 0x0.0) == 0x0.0
; run: %fma_f64(0x0.0, 0x0.0, 0x0.8000000000000p-1022) == 0x0.8000000000000p-1022
; run: %fma_f64(0x0.0000000000001p-1022, 0x0.0000000000001p-1022, 0x0.0000000000001p-1022) == 0x0.0000000000001p-1022
; run: %fma_f64(0x0.0000000000001p-1022, 0x0.0000000000001p-1022, 0x0.0) == 0x0.0
; run: %fma_f64(0x0.0, 0x0.0, 0x0.0000000000001p-1022) == 0x0.0000000000001p-1022


; Regression tests for x86_64-pc-windows-gnu
; See: https://github.com/bytecodealliance/wasmtime/issues/4512
; run: %fma_f64(0x1.0p1000, 0x1.0p1000, -Inf) == -Inf
; run: %fma_f64(-0x1.4f8ac19291ffap1023, 0x1.39c33c8d39b7p-1025, 0x1.ee11f685e2e12p-1) == 0x1.2071b0283f156p-1
; run: %fma_f64(0x1.0000000000008p500, 0x1.1p500, 0x1.0p-1074) == 0x1.1000000000009p1000
; run: %fma_f64(0x1.0000000000001p500, 0x1.8p500, -0x1.0p-1074) == 0x1.8000000000001p1000
; run: %fma_f64(0x0.ffffffep513, 0x1.0000002p511, -0x1.0p-1074) == 0x1.fffffffffffffp1023

;; The IEEE754 Standard does not make a lot of guarantees about what
;; comes out of NaN producing operations, we just check if its a NaN
function %fma_is_nan_f64(f64, f64, f64) -> i32 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fma v0, v1, v2
    v4 = fcmp ne v3, v3
    v5 = bint.i32 v4
    return v5
}
; run: %fma_is_nan_f64(Inf, -Inf, Inf) == 1
; run: %fma_is_nan_f64(-Inf, Inf, Inf) == 1
; run: %fma_is_nan_f64(-Inf, -Inf, -Inf) == 1

; run: %fma_is_nan_f64(+NaN, 0x0.0, 0x0.0) == 1
; run: %fma_is_nan_f64(0x0.0, +NaN, 0x0.0) == 1
; run: %fma_is_nan_f64(0x0.0, 0x0.0, +NaN) == 1
; run: %fma_is_nan_f64(-NaN, 0x0.0, 0x0.0) == 1
; run: %fma_is_nan_f64(0x0.0, -NaN, 0x0.0) == 1
; run: %fma_is_nan_f64(0x0.0, 0x0.0, -NaN) == 1

; This is a regression test for the native fma instruction
; Discovered by the fuzzer in: https://github.com/bytecodealliance/wasmtime/issues/4759
function %fma_load_f32(f32, f32, f32) -> f32 {
    ss0 = explicit_slot 4

block0(v0: f32, v1: f32, v2: f32):
    stack_store.f32 v2, ss0
    v3 = stack_load.f32 ss0
    v4 = fma v0, v1, v3
    return v4
}
; run: %fma_load_f32(0x9.0, 0x9.0, 0x9.0) == 0x1.680000p6
