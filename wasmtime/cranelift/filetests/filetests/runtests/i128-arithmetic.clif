test interpret
test run
set enable_llvm_abi_extensions=true
target aarch64
target s390x
target x86_64

function %add_i128(i128, i128) -> i128 {
block0(v0: i128,v1: i128):
    v2 = iadd v0, v1
    return v2
}
; run: %add_i128(0, 0) == 0
; run: %add_i128(1, 0) == 1
; run: %add_i128(1, 1) == 2
; run: %add_i128(1, -1) == 0
; run: %add_i128(0xFFFFFFFF_FFFFFFFF_00000000_00000000, 0x00000000_00000000_FFFFFFFF_FFFFFFFF) == -1
; run: %add_i128(0x00000000_00000000_FFFFFFFF_FFFFFFFF, 1) == 0x00000000_00000001_00000000_00000000

; run: %add_i128(0x01234567_89ABCDEF_01234567_89ABCDEF, 0xFEDCBA98_76543210_FEDCBA98_76543210) == -1
; run: %add_i128(0x06060606_06060606_A00A00A0_0A00A00A, 0x30303030_30303030_0BB0BB0B_B0BB0BB0) == 0x36363636_36363636_ABBABBAB_BABBABBA
; run: %add_i128(0xC0FFEEEE_C0FFEEEE_C0FFEEEE_C0FFEEEE, 0x1DCB1111_1DCB1111_1DCB1111_1DCB1111) == 0xDECAFFFF_DECAFFFF_DECAFFFF_DECAFFFF


function %sub_i128(i128, i128) -> i128 {
block0(v0: i128,v1: i128):
    v2 = isub v0, v1
    return v2
}
; run: %sub_i128(0, 0) == 0
; run: %sub_i128(1, 1) == 0
; run: %sub_i128(1, 0) == 1
; run: %sub_i128(0, 1) == -1
; run: %sub_i128(0, -1) == 1

; run: %sub_i128(-1, 0xFEDCBA98_76543210_FEDCBA98_76543210) == 0x01234567_89ABCDEF_01234567_89ABCDEF
; run: %sub_i128(0x36363636_36363636_ABBABBAB_BABBABBA, 0x30303030_30303030_0BB0BB0B_B0BB0BB0) == 0x06060606_06060606_A00A00A0_0A00A00A
; run: %sub_i128(0xDECAFFFF_DECAFFFF_DECAFFFF_DECAFFFF, 0x1DCB1111_1DCB1111_1DCB1111_1DCB1111) == 0xC0FFEEEE_C0FFEEEE_C0FFEEEE_C0FFEEEE


function %mul_i128(i128, i128) -> i128 {
block0(v0: i128,v1: i128):
    v2 = imul v0, v1
    return v2
}
; run: %mul_i128(0, 0) == 0
; run: %mul_i128(1, 1) == 1
; run: %mul_i128(1, 0) == 0
; run: %mul_i128(0, 1) == 0
; run: %mul_i128(2, 1) == 2
; run: %mul_i128(2, 2) == 4
; run: %mul_i128(1, -1) == -1
; run: %mul_i128(2, -1) == -2

; run: %mul_i128(0x01010101_01010101_01010101_01010101, 13) == 0x0D0D0D0D_0D0D0D0D_0D0D0D0D_0D0D0D0D
; run: %mul_i128(13, 0x01010101_01010101_01010101_01010101) == 0x0D0D0D0D_0D0D0D0D_0D0D0D0D_0D0D0D0D
; run: %mul_i128(0x00000000_01234567_89ABCDEF_00000000, 0x00000000_FEDCBA98_76543210_00000000) == 0x2236D88F_E5618CF0_00000000_00000000
; run: %mul_i128(0xC0FFEEEE_C0FFEEEE_C0FFEEEE_C0FFEEEE, 0xDECAFFFF_DECAFFFF_DECAFFFF_DECAFFFF) == 0x5ECD38B5_9D1C2B7E_DB6B1E48_19BA1112


; Tests that imm's are sign extended on i128's
; See: https://github.com/bytecodealliance/wasmtime/issues/4568
function %iadd_imm_neg(i128) -> i128 {
block0(v0: i128):
    v1 = iadd_imm.i128 v0, -1
    return v1
}
; run: %iadd_imm_neg(1) == 0
